# -*- coding: utf-8 -*-
"""MyDataSci

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYDydr5LWBkTiY7wGVk6yHsnw5Rym7d_
"""

import pandas as pd
import numpy as np
from math import cos, sin, pi
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

"""Before we get into this data science prediciton, I would like to go over collection and analysis methods. To score the applicants, I have included their high school top 6 average, their AIF prestige, uniqueness and contests scores to quantify their admission score. I will plot the findings in a chart below.
My hypothesis is that as averages heighten, the line of acceptance will go lower and lower for the AIF score, as the AIF becomes less and less important. This is to quantify how important the AIF is. I will also score it upon the individual metrics to see what universities value in comparison to the total trend line.

"""

math_id = '1_5TldRoNvMhtR-7pmAWBWEuzpWPEbe4a38Vkr9DIhwk'
cs_id = '16U9JiyNum_qxv7zhBYHGD3jcUwBt2L9Y7SPNJ4-gICQ'
csr_id = '1e_u04Qm1kP7T7yL2Kn7_7DFZKOiSzxN_71ppPRjolLM'
MathData = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{math_id}/export?format=csv")
CSData = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{cs_id}/export?format=csv")
CSrejects = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{csr_id}/export?format=csv")

X = CSData['Average']
y = CSData['Total Score']
Xb = CSrejects['Average']
yb = CSrejects['TotalAifScore']

plt.plot(X, y, 'x')
plt.xlim(95, 100)  # X-axis range from 0 to 5
plt.ylim(7, 18) # Y-axis range from 0 to 20
# FOR COMPUTER SCIENCE ADMITS

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1, random_state = 23)

X_train = np.array(X_train).reshape(-1, 1)
  X_train

X_test = np.array(X_test).reshape(-1, 1)
X_test

lr = LinearRegression()

lr.fit(X_train, y_train)

c = (lr.intercept_)
c

m = (lr.coef_)
m

Y_pred_train = m*X_train + c
Y_pred_train

y_pred_train1 = lr.predict(X_train)
y_pred_train1

plt.scatter(X_train, y_train)
plt.plot(X_train, y_pred_train1, color = 'red')
plt.xlabel('Average')
plt.ylabel('AIF')

point1 = m * 90 + c
point1

point2 =  m*100 + c
point2

plt.plot(X, y, 'o')
plt.plot(Xb, yb, 'o', color = 'red')

point1 = [90, point1]
point2 = [100, point2]
x_values = [point1[0], point2[0]]
y_values = [point1[1], point2[1]]
plt.plot(x_values, y_values, color='green')

plt.xlabel('Average')
plt.ylabel('AIF')
plt.xlim(90, 100)  # X-axis range from 0 to 5
plt.ylim(7, 18) # Y-axis range from 0 to 20

from scipy.optimize import curve_fit
from numpy import arange

xData = CSData['Average']
yData = CSData['Total Score']

def map_func(x, a, b, c):
  comp = a* x + b * x**2 + c
  return comp

opt_param, _ = curve_fit(map_func, xData, yData)
a, b, c = opt_param

plt.scatter(xData, yData, color = 'blue', label = 'CS admits')
plt.plot(Xb, yb, 'o', color = 'red', label = 'CS rejects')

x_line = arange(min(xData), max(xData), 1)
y_line = map_func(x_line, a, b, c)

plt.plot(x_line, y_line, color = 'green', label='High chance of admission')

plt.xlabel('Average')
plt.ylabel('AIF (Srivatsa metric)')
plt.xlim(90, 100)  # X-axis range from 0 to 5
plt.ylim(7, 18) # Y-axis range from 0 to 20

plt.title("The odds of admission into CS (Nandan Srivatsa model)")

plt.legend()

plt.show()